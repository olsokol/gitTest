git init - create a new repository
git status - gives information of the current status of a git repository and 
            its contents
git cofig --global user.name
                    user.email - change global name email
         --local user.name
                 user.email -change name email for this particular
                            repository
        --global core.editor "code --wait" - to change default editor to VSCode
git add Name1 Name2 - add files to the staging area
        --all add all files and folders (new, modified, and deleted)
        . stages new files and modifications, without deletions (on the current directory and its subdirectories).
git commit - commit staged files and opens editor to add message for commit
          -m adds message to a commit 
          -a will automatically stage every changed, 
                already tracked file.
          -am stage all and add message
          --amend - amends previous commit (you may add new file to commit, or change message)
git log - displays detailed info about commits
        --oneline displays commit messages
.gitignore - file in the root of repository, in 
                which we tell git what to ignore.
                fileName
                folderName/
                *.log will ignore any files with the .log extension


git branch - to view your existing branches
           git branch <branch-name> create a new branch     
           git branch -d to dtelete a branch
           git branch -m move/rename a branch

git switch <branch-name> - to switch between branches
                git switch -c <branch-name> - create a new branch and switch to it in one go.
                git switch --orphan <new-branch> Create a new unborn branch, named <new-branch>. All tracked files are removed.

git checkout <branch-name> - to switch between branches
                git checkout -b <branch-name> - create a new branch and switch
                                to it in one go.
                git checkout --orphan <new-branch> Create a new unborn branch,
                                 named <new-branch>, started from <start-point> and switch to it. The first commit made on this new branch will have no parents and it will be the root of a new history totally disconnected from all the other branches and commits.
                git checkout <commit-hash> -  detaches HEAD, In detached HEAD
                                it's possible to                                make new commits and then make a branch from them.
                git switch -  - to return back (attach HEAD) from where the
                                HEAD was detached.  
                git checkout HEAD~1 - refers to the commit before HEAD (parent)
                             HEAD~2 - refers to 2 commits before HEAD (grandparent)
                git checkout HEAD <filename> - to discard any changes in 
                                <filename>, reverting back to the HEAD. reverts the file back to whatever it looked like when 
                                you last commited.

git merge <branch-name>  Join two or more development histories together
git rm --cached <file> to  stop tracking a file
git rm -r --cached <folder> to stop tracking folder and all files in the folder recursively

git diff - show differences between unstaged files and last commit
        git diff HEAD   lists all changes (staged and unstaged) in the
                        working tree since last commit
        git diff --staged
        git diff --cached lists the changes between the staging area and last 
                          commit "show what will be inlcuded in my commit
                          if I run git commit right now"

        git diff HEAD  <filename> 
        git diff --staged <filename>
        git diff --cached <filename> -narrowing to one file

        git diff HEAD HEAD~1 -differences between head and 
                                    parent on distance 1
                     HEAD~x (x being a number. 1 going back one more, 2 going back two more, etc.)
        git diff branch1..branch2  - show differences between two branches 
                                    (..   or space may be used)
        git diff commit1..commit2 -show changes between two commits

git stash 
        <stash> stashes may be referenced by specifying just the stash 
        index (e.g. the integer n is equivalent to stash@{n}).
           push - save local modifications to a new stash entry and 
                  roll them back to HEAD  
           pop - remove a single stashed state from the stash list 
                  and apply it on top of the current working tree state. 
                  may be used with  <stash>
           apply - pop, but do not remove the state from the stash list. 
                 may be used with  <stash>
           list -list of stashes
           show -shows a stash. may be used with <stash>
           drop <stash> -remove a single stash entry
           clear - remove all the stash entries. 

git restore -restore working tree files
        <filename> - discard changes since the last commit
        --source <commit-hash> <filename> - discard changes to that stage. 
                                        May be from another branch. May take a file out of another commit
        --staged <fileName> --unstage this file. Nothing else changed 
        . - to restore all files in the current directory