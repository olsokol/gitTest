git init - create a new repository
git status - gives information of the current status of a git repository and 
            its contents
git cofig --global user.name
                    user.email - change global name email
         --local user.name
                 user.email -change name email for this particular
                            repository
        --global core.editor "code --wait" - to change default editor to VSCode
git add Name1 Name2 - add files to the staging area
        --all add all files and folders
        . stages new files and modifications, without deletions (on the current directory and its subdirectories).
git commit - commit staged files and opens editor to add message for commit
          -m adds message to a commit 
          -a will automatically stage every changed, 
                already tracked file.
          -am stage all and add message
          --amend - amends previous commit (you may add new file to commit, or change message)
git log - displays detailed info about commits
        --oneline displays commit messages
.gitignore - file in the root of repository, in 
                which we tell git what to ignore.
                fileName
                folderName/
                *.log will ignore any files with the .log extension


git branch - to view your existing branches
           git branch <branch-name> create a new branch     
           git branch -d to dtelete a branch
           git branch -m move/rename a branch

git switch <branch-name> - to switch between branches
                git switch -c <branch-name> - create a new branch and switch to it in one go.
                git switch --orphan <new-branch> Create a new unborn branch, named <new-branch>. All tracked files are removed.

git checkout <branch-name> - to switch between branches
                git checkout -b <branch-name> - create a new branch and switch to it in one go.
                git checkout --orphan <new-branch> Create a new unborn branch, named <new-branch>, started from <start-point> and switch to it. The first commit made on this new branch will have no parents and it will be the root of a new history totally disconnected from all the other branches and commits.

git merge <branch-name>  Join two or more development histories together
